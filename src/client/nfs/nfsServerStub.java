/*
 * Automatically generated by jrpcgen 1.0.7 on 1/4/15 12:30 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package client.nfs;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class NfsServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public NfsServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public NfsServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public NfsServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(Nfs.NFS_PROGRAM, 2),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 2 ) {
            switch ( procedure ) {
            case 0: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_NULL_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 1: {
                FHandle args$ = new FHandle();
                call.retrieveCall(args$);
                AttrStat result$ = NFSPROC_GETATTR_2(args$);
                call.reply(result$);
                break;
            }
            case 2: {
                SAttrArgs args$ = new SAttrArgs();
                call.retrieveCall(args$);
                AttrStat result$ = NFSPROC_SETATTR_2(args$);
                call.reply(result$);
                break;
            }
            case 3: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_ROOT_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 4: {
                DirOpArgs args$ = new DirOpArgs();
                call.retrieveCall(args$);
                DirOpRes result$ = NFSPROC_LOOKUP_2(args$);
                call.reply(result$);
                break;
            }
            case 5: {
                FHandle args$ = new FHandle();
                call.retrieveCall(args$);
                ReadLinkRes result$ = NFSPROC_READLINK_2(args$);
                call.reply(result$);
                break;
            }
            case 6: {
                ReadArgs args$ = new ReadArgs();
                call.retrieveCall(args$);
                ReadRes result$ = NFSPROC_READ_2(args$);
                call.reply(result$);
                break;
            }
            case 7: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_WRITECACHE_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 8: {
                WriteArgs args$ = new WriteArgs();
                call.retrieveCall(args$);
                AttrStat result$ = NFSPROC_WRITE_2(args$);
                call.reply(result$);
                break;
            }
            case 9: {
                CreateArgs args$ = new CreateArgs();
                call.retrieveCall(args$);
                DirOpRes result$ = NFSPROC_CREATE_2(args$);
                call.reply(result$);
                break;
            }
            case 10: {
                DirOpArgs args$ = new DirOpArgs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_REMOVE_2(args$));
                call.reply(result$);
                break;
            }
            case 11: {
                RenameArgs args$ = new RenameArgs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_RENAME_2(args$));
                call.reply(result$);
                break;
            }
            case 12: {
                LinkArgs args$ = new LinkArgs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_LINK_2(args$));
                call.reply(result$);
                break;
            }
            case 13: {
                SymlinkArgs args$ = new SymlinkArgs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_SYMLINK_2(args$));
                call.reply(result$);
                break;
            }
            case 14: {
                CreateArgs args$ = new CreateArgs();
                call.retrieveCall(args$);
                DirOpRes result$ = NFSPROC_MKDIR_2(args$);
                call.reply(result$);
                break;
            }
            case 15: {
                DirOpArgs args$ = new DirOpArgs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_RMDIR_2(args$));
                call.reply(result$);
                break;
            }
            case 16: {
                ReadDirArgs args$ = new ReadDirArgs();
                call.retrieveCall(args$);
                ReadDirRes result$ = NFSPROC_READDIR_2(args$);
                call.reply(result$);
                break;
            }
            case 17: {
                FHandle args$ = new FHandle();
                call.retrieveCall(args$);
                StatFsRes result$ = NFSPROC_STATFS_2(args$);
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void NFSPROC_NULL_2();

    public abstract AttrStat NFSPROC_GETATTR_2(FHandle arg1);

    public abstract AttrStat NFSPROC_SETATTR_2(SAttrArgs arg1);

    public abstract void NFSPROC_ROOT_2();

    public abstract DirOpRes NFSPROC_LOOKUP_2(DirOpArgs arg1);

    public abstract ReadLinkRes NFSPROC_READLINK_2(FHandle arg1);

    public abstract ReadRes NFSPROC_READ_2(ReadArgs arg1);

    public abstract void NFSPROC_WRITECACHE_2();

    public abstract AttrStat NFSPROC_WRITE_2(WriteArgs arg1);

    public abstract DirOpRes NFSPROC_CREATE_2(CreateArgs arg1);

    public abstract int NFSPROC_REMOVE_2(DirOpArgs arg1);

    public abstract int NFSPROC_RENAME_2(RenameArgs arg1);

    public abstract int NFSPROC_LINK_2(LinkArgs arg1);

    public abstract int NFSPROC_SYMLINK_2(SymlinkArgs arg1);

    public abstract DirOpRes NFSPROC_MKDIR_2(CreateArgs arg1);

    public abstract int NFSPROC_RMDIR_2(DirOpArgs arg1);

    public abstract ReadDirRes NFSPROC_READDIR_2(ReadDirArgs arg1);

    public abstract StatFsRes NFSPROC_STATFS_2(FHandle arg1);

}
// End of nfsServerStub.java
