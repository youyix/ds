/*
 * Automatically generated by jrpcgen 1.0.7 on 1/4/15 12:29 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package client.mount;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class MountServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public MountServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public MountServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public MountServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(Mount.MOUNTPROG, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 0: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                MOUNTPROC_NULL_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 1: {
                DirPath args$ = new DirPath();
                call.retrieveCall(args$);
                FHStatus result$ = MOUNTPROC_MNT_1(args$);
                call.reply(result$);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                MountList result$ = MOUNTPROC_DUMP_1();
                call.reply(result$);
                break;
            }
            case 3: {
                DirPath args$ = new DirPath();
                call.retrieveCall(args$);
                MOUNTPROC_UMNT_1(args$);
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 4: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                MOUNTPROC_UMNTALL_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 5: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                ExportList result$ = MOUNTPROC_EXPORT_1();
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void MOUNTPROC_NULL_1();

    public abstract FHStatus MOUNTPROC_MNT_1(DirPath arg1);

    public abstract MountList MOUNTPROC_DUMP_1();

    public abstract void MOUNTPROC_UMNT_1(DirPath arg1);

    public abstract void MOUNTPROC_UMNTALL_1();

    public abstract ExportList MOUNTPROC_EXPORT_1();

}
// End of mountServerStub.java
