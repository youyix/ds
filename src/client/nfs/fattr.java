/*
 * Automatically generated by jrpcgen 1.0.7 on 1/4/15 12:30 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package client.nfs;
import org.acplt.oncrpc.*;
import java.io.IOException;

public class FAttr implements XdrAble {
    public int type;
    public int mode;
    public int nlink;
    public int uid;
    public int gid;
    public int size;
    public int blocksize;
    public int rdev;
    public int blocks;
    public int fsid;
    public int fileid;
    public TimeVal atime;
    public TimeVal mtime;
    public TimeVal ctime;

    public FAttr() {
    }

    public FAttr(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr)
           throws OncRpcException, IOException {
        xdr.xdrEncodeInt(type);
        xdr.xdrEncodeInt(mode);
        xdr.xdrEncodeInt(nlink);
        xdr.xdrEncodeInt(uid);
        xdr.xdrEncodeInt(gid);
        xdr.xdrEncodeInt(size);
        xdr.xdrEncodeInt(blocksize);
        xdr.xdrEncodeInt(rdev);
        xdr.xdrEncodeInt(blocks);
        xdr.xdrEncodeInt(fsid);
        xdr.xdrEncodeInt(fileid);
        atime.xdrEncode(xdr);
        mtime.xdrEncode(xdr);
        ctime.xdrEncode(xdr);
    }

    public void xdrDecode(XdrDecodingStream xdr)
           throws OncRpcException, IOException {
        type = xdr.xdrDecodeInt();
        mode = xdr.xdrDecodeInt();
        nlink = xdr.xdrDecodeInt();
        uid = xdr.xdrDecodeInt();
        gid = xdr.xdrDecodeInt();
        size = xdr.xdrDecodeInt();
        blocksize = xdr.xdrDecodeInt();
        rdev = xdr.xdrDecodeInt();
        blocks = xdr.xdrDecodeInt();
        fsid = xdr.xdrDecodeInt();
        fileid = xdr.xdrDecodeInt();
        atime = new TimeVal(xdr);
        mtime = new TimeVal(xdr);
        ctime = new TimeVal(xdr);
    }

}
// End of fattr.java
