/*
 * Automatically generated by jrpcgen 1.0.7 on 1/4/15 12:30 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package client.nfs;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

/**
 * The class <code>nfsClient</code> implements the client stub proxy
 * for the NFS_PROGRAM remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class NfsClient extends OncRpcClientStub {

    /**
     * Constructs a <code>nfsClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NfsClient(InetAddress host, int protocol)
           throws OncRpcException, IOException {
        super(host, Nfs.NFS_PROGRAM, 2, 0, protocol);
    }

    /**
     * Constructs a <code>nfsClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NfsClient(InetAddress host, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, Nfs.NFS_PROGRAM, 2, port, protocol);
    }

    /**
     * Constructs a <code>nfsClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NfsClient(OncRpcClient client)
           throws OncRpcException, IOException {
        super(client);
    }

    /**
     * Constructs a <code>nfsClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NfsClient(InetAddress host, int program, int version, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, 0, protocol);
    }

    /**
     * Constructs a <code>nfsClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NfsClient(InetAddress host, int program, int version, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, port, protocol);
    }

    /**
     * Call remote procedure NFSPROC_NULL_2.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NFSPROC_NULL_2()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(Nfs.NFSPROC_NULL_2, Nfs.NFS_VERSION, args$, result$);
    }

    /**
     * Call remote procedure NFSPROC_GETATTR_2.
     * @param arg1 parameter (of type fhandle) to the remote procedure call.
     * @return Result from remote procedure call (of type attrstat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public AttrStat NFSPROC_GETATTR_2(FHandle arg1)
           throws OncRpcException, IOException {
        AttrStat result$ = new AttrStat();
        client.call(Nfs.NFSPROC_GETATTR_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_SETATTR_2.
     * @param arg1 parameter (of type sattrargs) to the remote procedure call.
     * @return Result from remote procedure call (of type attrstat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public AttrStat NFSPROC_SETATTR_2(SAttrArgs arg1)
           throws OncRpcException, IOException {
        AttrStat result$ = new AttrStat();
        client.call(Nfs.NFSPROC_SETATTR_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_ROOT_2.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NFSPROC_ROOT_2()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(Nfs.NFSPROC_ROOT_2, Nfs.NFS_VERSION, args$, result$);
    }

    /**
     * Call remote procedure NFSPROC_LOOKUP_2.
     * @param arg1 parameter (of type diropargs) to the remote procedure call.
     * @return Result from remote procedure call (of type diropres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public DirOpRes NFSPROC_LOOKUP_2(DirOpArgs arg1)
           throws OncRpcException, IOException {
        DirOpRes result$ = new DirOpRes();
        client.call(Nfs.NFSPROC_LOOKUP_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_READLINK_2.
     * @param arg1 parameter (of type fhandle) to the remote procedure call.
     * @return Result from remote procedure call (of type readlinkres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public ReadLinkRes NFSPROC_READLINK_2(FHandle arg1)
           throws OncRpcException, IOException {
        ReadLinkRes result$ = new ReadLinkRes();
        client.call(Nfs.NFSPROC_READLINK_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_READ_2.
     * @param arg1 parameter (of type readargs) to the remote procedure call.
     * @return Result from remote procedure call (of type readres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public ReadRes NFSPROC_READ_2(ReadArgs arg1)
           throws OncRpcException, IOException {
        ReadRes result$ = new ReadRes();
        client.call(Nfs.NFSPROC_READ_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_WRITECACHE_2.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NFSPROC_WRITECACHE_2()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(Nfs.NFSPROC_WRITECACHE_2, Nfs.NFS_VERSION, args$, result$);
    }

    /**
     * Call remote procedure NFSPROC_WRITE_2.
     * @param arg1 parameter (of type writeargs) to the remote procedure call.
     * @return Result from remote procedure call (of type attrstat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public AttrStat NFSPROC_WRITE_2(WriteArgs arg1)
           throws OncRpcException, IOException {
        AttrStat result$ = new AttrStat();
        client.call(Nfs.NFSPROC_WRITE_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_CREATE_2.
     * @param arg1 parameter (of type createargs) to the remote procedure call.
     * @return Result from remote procedure call (of type diropres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public DirOpRes NFSPROC_CREATE_2(CreateArgs arg1)
           throws OncRpcException, IOException {
        DirOpRes result$ = new DirOpRes();
        client.call(Nfs.NFSPROC_CREATE_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_REMOVE_2.
     * @param arg1 parameter (of type diropargs) to the remote procedure call.
     * @return Result from remote procedure call (of type stat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int NFSPROC_REMOVE_2(DirOpArgs arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        client.call(Nfs.NFSPROC_REMOVE_2, Nfs.NFS_VERSION, arg1, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure NFSPROC_RENAME_2.
     * @param arg1 parameter (of type renameargs) to the remote procedure call.
     * @return Result from remote procedure call (of type stat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int NFSPROC_RENAME_2(RenameArgs arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        client.call(Nfs.NFSPROC_RENAME_2, Nfs.NFS_VERSION, arg1, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure NFSPROC_LINK_2.
     * @param arg1 parameter (of type linkargs) to the remote procedure call.
     * @return Result from remote procedure call (of type stat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int NFSPROC_LINK_2(LinkArgs arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        client.call(Nfs.NFSPROC_LINK_2, Nfs.NFS_VERSION, arg1, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure NFSPROC_SYMLINK_2.
     * @param arg1 parameter (of type symlinkargs) to the remote procedure call.
     * @return Result from remote procedure call (of type stat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int NFSPROC_SYMLINK_2(SymlinkArgs arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        client.call(Nfs.NFSPROC_SYMLINK_2, Nfs.NFS_VERSION, arg1, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure NFSPROC_MKDIR_2.
     * @param arg1 parameter (of type createargs) to the remote procedure call.
     * @return Result from remote procedure call (of type diropres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public DirOpRes NFSPROC_MKDIR_2(CreateArgs arg1)
           throws OncRpcException, IOException {
        DirOpRes result$ = new DirOpRes();
        client.call(Nfs.NFSPROC_MKDIR_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_RMDIR_2.
     * @param arg1 parameter (of type diropargs) to the remote procedure call.
     * @return Result from remote procedure call (of type stat).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int NFSPROC_RMDIR_2(DirOpArgs arg1)
           throws OncRpcException, IOException {
        XdrInt result$ = new XdrInt();
        client.call(Nfs.NFSPROC_RMDIR_2, Nfs.NFS_VERSION, arg1, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure NFSPROC_READDIR_2.
     * @param arg1 parameter (of type readdirargs) to the remote procedure call.
     * @return Result from remote procedure call (of type readdirres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public ReadDirRes NFSPROC_READDIR_2(ReadDirArgs arg1)
           throws OncRpcException, IOException {
        ReadDirRes result$ = new ReadDirRes();
        client.call(Nfs.NFSPROC_READDIR_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure NFSPROC_STATFS_2.
     * @param arg1 parameter (of type fhandle) to the remote procedure call.
     * @return Result from remote procedure call (of type statfsres).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public StatFsRes NFSPROC_STATFS_2(FHandle arg1)
           throws OncRpcException, IOException {
        StatFsRes result$ = new StatFsRes();
        client.call(Nfs.NFSPROC_STATFS_2, Nfs.NFS_VERSION, arg1, result$);
        return result$;
    }

}
// End of nfsClient.java
